spring:
  shardingsphere:
    datasource:
      names: ds-orders-0, ds-orders-1
      ds-orders-0:
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: com.mysql.jdbc.Driver
        jdbc-url: jdbc:mysql://rm-bp1a5iqov5u7bhmamwo.mysql.rds.aliyuncs.com:3306/ss_demo_0?useSSL=false&useUnicode=true&characterEncoding=UTF-8
        username: someone
        password: chengxq123
      ds-orders-1:
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: com.mysql.jdbc.Driver
        jdbc-url: jdbc:mysql://rm-bp1a5iqov5u7bhmamwo.mysql.rds.aliyuncs.com:3306/ss_demo_1?useSSL=false&useUnicode=true&characterEncoding=UTF-8
        username: someone
        password: chengxq123
    # 分片规则
    sharding:
      tables:
        orders:
          actualDataNodes: ds-orders-0.orders_$->{[0,2,4,6]}, ds-orders-1.orders_$->{[1,3,5,7]}
          key-generator:
            column: id
            type: SNOWFLAKE
          database-strategy:
            inline:
              algorithm-expression: ds-orders-$->{user_id % 2}
              sharding-column: user_id
          table-strategy:
            inline:
              algorithm-expression: orders_$->{user_id % 8}
              sharding-column: user_id
        # order_config 表配置
        order_config:
          actualDataNodes: ds-orders-0.order_config # 仅映射到 ds-orders-0 数据源的 order_config 表
    # 拓展属性配置
    props:
      sql:
        show: true # 打印 SQL
mybatis:
  config-location: classpath:mybatis-config.xml
  mapper-locations: classpath:mapper/*.xml
  type-aliases-package: org.xq.domain